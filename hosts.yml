#
# This playbook manages all "machine types" for Percona Training
#

- hosts: all
  environment:
    PERCONA_TELEMETRY_DISABLE: 1
  roles:
    - common

- hosts: node1
  gather_facts: no
  roles:
    - minikube

# This should only match "db1" hosts
- hosts: db1
  gather_facts: no
  roles:
    - mysql
    - sysbench
  tasks:

  - name: Install Percona Repo
    yum:
      state: latest
      name:
        - http://repo.percona.com/yum/percona-release-latest.noarch.rpm

  - name: install PMM2 client, mydumper, etc
    yum:
      state: installed
      disable_gpg_check: yes
      name:
        - pmm2-client
        - https://github.com/mydumper/mydumper/releases/download/v0.12.5-3/mydumper-0.12.5-3.el7.x86_64.rpm
        - httpd
        - php
        - php-mysql
        - mysql-utilities
        - openssl
        - nc

  - name: clone my-movies repo
    git:
      repo: https://github.com/percona/training-mymovies
      dest: /var/www/html
      update: no

  - name: start httpd
    service: name=httpd state=started

# This should only match "db2" hosts to remove everything in
# preparation for setting up a replica
- hosts: db2
  gather_facts: no
  roles:
    - mysql
  tasks:

  - name: check for existing setup
    stat: path=/var/lib/mysql/xtrabackup_binlog_info
    register: existing_setup

  - name: disable mysql
    service: name=mysql state=stopped
    ignore_errors: yes
    when: not existing_setup.stat.exists

  - name: remove percona packages
    yum:
      state: removed
      name:
        - 'percona-server-*'
        - 'percona-*'
        - pmm-client
        - pmm2-client
    when: not existing_setup.stat.exists

  - name: move back my.cnf
    copy: remote_src=True src=/etc/my.cnf.rpmsave dest=/etc/my.cnf

# Setup the scoreboard for my-movies
- hosts: scoreboard
  gather_facts: no
  roles:
    - scoreboard

# Setup PXC/GR "app" node with sysbench, scripts, proxysql, and mysqlrouter
- hosts: app
  gather_facts: no
  roles:
    - sysbench
  tasks:

  - name: Install Percona Repo
    yum:
      state: latest
      name:
        - http://repo.percona.com/yum/percona-release-latest.noarch.rpm

  - name: Enable PS 80 Repo
    shell: >
      percona-release enable ps-80

  - name: Install Percona client, libs, proxysql2, router, shell, pmm2-client
    yum:
      state: latest
      name:
        - percona-server-client
        - percona-server-shared
        - percona-mysql-router
        - percona-mysql-shell
        - pmm2-client
        - proxysql2

  - name: Remove Percona Server
    yum:
      state: absent
      name: percona-server-server

  - name: Remove my.cnf
    ansible.builtin.file:
      path: /etc/my.cnf
      state: absent

## Settings for PXC/GR tutorial
- hosts: mysql1:mysql2:mysql3
  gather_facts: no
  roles:
    - mysql
  tasks:

  - name: Fetch latest PXC version
    tags: fetchver
    shell: >
      curl -s https://raw.githubusercontent.com/percona/percona-docker/main/percona-xtradb-cluster-8.0/Dockerfile |
      grep "ENV PXC_VERSION" | cut -d " " -f 3 | cut -d "-" -f 1
    register: pxcversion
    run_once: true

  - name: Install Percona Repo
    yum:
      state: latest
      name:
        - http://repo.percona.com/yum/percona-release-latest.noarch.rpm

  - name: Version lock PS {{ pslock | default(pxcversion.stdout) }}
    shell: >
      yum versionlock clear &&
      yum versionlock percona-server-*-{{ pslock | default(pxcversion.stdout) }} percona-xtradb-cluster-*-{{ pslock | default(pxcversion.stdout) }}

  - name: Enable Percona Toolkit Repo
    shell: >
      percona-release enable pt

  - name: Install Percona Server/Client
    yum:
      state: latest
      name:
        - percona-server-server
        - percona-server-client
        - percona-toolkit
        - perl-DBD-MySQL
        - pmm2-client
        - percona-xtrabackup-80

  - name: Update mysqld /etc/my.cnf Parameters
    tags: update_mycnf
    register: mysqldconfig
    ini_file:
      path: /etc/my.cnf
      section: "{{ item.section }}"
      option: "{{ item.param }}"
      value: "{{ item.value }}"
      state: "{{ item.state }}"
    with_items:
      - { section: "mysqld", param: "server_id", value: "{{ 101 |random(start=2, seed=inventory_hostname) }}", state: "present" }
      - { section: "mysql", param: "prompt", value: "\"{{inventory_hostname}} mysql> \"", state: "present" }

  - name: Restart mysql
    tags: update_mycnf
    service: name=mysql state=restarted enabled=yes
    when: (mysqldconfig is changed)

# For PXC/GR tutorial, on mysql1, create replication user to set up initial labs
- hosts: mysql1
  gather_facts: no
  roles:
    - sysbench
  tasks:

  - name: Create repl user
    shell: >
      mysql -uroot -e "CREATE USER IF NOT EXISTS 'repl'@'10.%' IDENTIFIED BY 'R3plica1234#';
      GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'repl'@'10.%';"

  - name: Copy proxysql GR views
    copy:
      src: roles/gr/files/proxysql_gr.sql
      dest: /home/rocky/proxysql_gr.sql

  - name: mysqltmp 1gb file, loop, mount
    shell: >
      dd if=/dev/zero of=/slowtmp.disk bs=1024k count=2048 2>&1 >/dev/null; \
      loop=$(losetup --show --find /slowtmp.disk); \
      size=$(blockdev --getsz $loop); \
      echo "0 $size delay $loop 0 500" | dmsetup create dm-slow; \
      chmod 777 /dev/mapper/dm-slow && mkfs.xfs /dev/mapper/dm-slow 2>&1 >/dev/null; \
      mount /dev/mapper/dm-slow /mnt/ && mkdir /mnt/mysqltmp && chown mysql:mysql /mnt/mysqltmp
    when: pmmtutorial is defined and pmmtutorial == "Y"

  - name: Update my.cnf for pmm tutorial
    register: mysqldconfig
    ini_file:
      path: /etc/my.cnf
      section: "{{ item.section }}"
      option: "{{ item.param }}"
      value: "{{ item.value }}"
      state: "{{ item.state }}"
    with_items:
      - { section: "mysqld", param: "innodb_buffer_pool_size", value: "128M", state: "present" }
    when: pmmtutorial is defined and pmmtutorial == "Y"

  - name: Restart mysql
    service: name=mysql state=restarted enabled=yes
    when: (mysqldconfig is changed)

# For PXC/GR tutorial, connect replication
- hosts: mysql2:mysql3
  gather_facts: no
  roles:
    - mysql
  tasks:

  - name: Connect Async Replication
    tags: connect_replication
    shell: >
      mysql -uroot -e "STOP REPLICA; RESET REPLICA ALL;
      CHANGE REPLICATION SOURCE TO SOURCE_HOST='{{ hostvars[inventory_hostname]['mysql_master_host'] }}',
      SOURCE_USER='repl', SOURCE_PASSWORD='R3plica1234#',
      SOURCE_LOG_FILE='mysqld-bin.000001', SOURCE_LOG_POS=4, MASTER_SSL=1; START REPLICA;"

  - name: GROUP REPLICATION - Drop everything, reset master, purge binlogs
    shell: >
      mysql -uroot -e "STOP REPLICA; RESET REPLICA ALL;
      DROP DATABASE IF EXISTS imdb;
      DROP DATABASE IF EXISTS world;
      DROP DATABASE IF EXISTS sakila;
      DROP DATABASE IF EXISTS sysbench;
      FLUSH BINARY LOGS;
      RESET MASTER;"
    when: gr is defined and gr == "Y" and 'mysql3' in inventory_hostname

# For MongoDB exercises
- hosts: mongodb
  gather_facts: no
  environment: 
    PERCONA_TELEMETRY_DISABLE: 1
  tasks:
    - name: Ensure basic packages installed
      yum: pkg={{ item }}  state=installed
      with_items:
        - perl
        - ruby

    - name: install Percona key
      rpm_key:
        key: https://repo.percona.com/yum/PERCONA-PACKAGING-KEY
        state: present

    - name: install Percona repositories
      package:
        name: https://repo.percona.com/yum/percona-release-latest.noarch.rpm
        state: present

    - name: Enable the specific MongoDB version
      shell: "/usr/bin/percona-release enable psmdb-60 && /usr/bin/percona-release enable tools"

    - name: install RPM from repository
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - percona-server-mongodb
        - percona-backup-mongodb
        - pmm2-client

    - name: disable telemetry
      systemd:
        name: percona-telemetry-agent
        enabled: false
        state: stopped
        daemon_reload: yes
      ignore_errors: true

    - name: Create a symbolic link for Mongo shell
      become: yes
      ansible.builtin.file:
        src: /bin/mongosh
        dest: /bin/mongo
        owner: root
        group: root
        state: link

    - name: Stop default MongoDB instance
      service:
        name: mongod
        state: stopped
        enabled: false

    - name: Delete default MongoDB directory
      file:
        path: "/var/lib/mongo/"
        state: absent
